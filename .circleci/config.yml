# Compile Code, Unit Test, Dependency Scan, Static Analysis Scan, Build Image, Vulnerability Scan, Deploy Image to DockerHub
version: 2.1
orbs:
  snyk: snyk/snyk@0.0.8
  anchore: anchore/anchore-engine@1.4.0
jobs:
  Build:
    docker: &image # The '&image' setups up a reference tag to be used by '*image' (see unit tests)
      - image: circleci/openjdk:11-jdk
    steps:
      - run: &env # does the same as '&image' above and see usage below in unit tests
          name: Setting environment
          # DISABLE_DOWNLOAD_PROGRESS_OPTS - this variable simplifies the overall logging output from maven by restricting to warn level
          command: |
            echo "export DISABLE_DOWNLOAD_PROGRESS_OPTS=-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" >> $BASH_ENV
            source $BASH_ENV
      - checkout # Built in GitHub repo checkout
      - run:
          name: Maven install without tests
          command: |
            mvn -B install -DskipTests $DISABLE_DOWNLOAD_PROGRESS_OPTS
    # Execute unit tests separate from other executions to track performance
  Test:
    docker: *image
    steps:
      - run: *env
      - checkout
      - run:
          name: Maven test phase
          command: |
            mvn test -B $DISABLE_DOWNLOAD_PROGRESS_OPTS
  Tag Release:
    docker: *image
    steps:
      # Tag Release creates a Git tag with given name and pushes it to the given GitHub repo
      # This job is governed by the following environment variables:
      # $RELEASE - Set to true to perform a release, otherwise this step is skipped
      # $RELEASE_TAG - The release tag for this version
      # $RELEASE_VERSION - The version to release
      # $NEXT_VERSION - The next development version
      # To use this step the following MUST also be set: $GITHUB_KEY and $GPG_PASSPHRASE
      - checkout
#      - add_ssh_keys:
#          fingerprints:
#            - "7d:c7:cd:b5:88:19:73:bf:3b:c6:ee:71:e9:36:d0:e9"
      - run:
          name: Import GPG key
          command: echo -e "${GPG_KEY}" | gpg --import --no-tty --batch --yes
      - run:
          name: Tag Release
          command: |
            if [ $RELEASE = true ]
            then
              git config --global -l
              git config --global user.email "aaron.ilovici@connexta.com"
              git config --global user.name "Aaron"
              git remote rm origin
              git remote add origin 'git@github.com/aaronilovici/circle-test.git'
              mvn -B -Dtag=${RELEASE_TAG} -DreleaseVersion=${RELEASE_VERSION} -DdevelopmentVersion=${NEXT_VERSION} -Darguments=-Dgpg.passphrase=${GPG_PASSPHRASE} release:prepare
            fi

#  Deploy Artifacts: # Deploy artifacts to Nexus or Maven Central
#      docker: *image
#      steps:
#        # Deploy Artifacts uses the Maven Deploy plugin and it's configuration from the pom.xml to deploy an artifact
#        # This job is governed by the following environment variables:
#        # $RELEASE - Set to true to perform a release, otherwise this step is skipped
#        # To use this step the following MUST also be set: $GITHUB_KEY and $ION_GPG_KEYRING
#        - run: *env
#        - checkout
#        - run:
#            name: Deploy Artifacts
#            command: |
#              if [ $RELEASE = true ]
#              then
#                mvn javadoc:aggregate -B -DskipTests -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS
#                mvn deploy -B -DskipTests -DretryFailedDeploymentCount=10 -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS -Dgpg.secretKeyring=${ION_GPG_KEYRING} -Dgpg.publicKeyring=${ION_GPG_KEYRING} -Dgpg.passphraseServerId=\"ion-signing\"
#              fi

workflows:
  fullrun:
    jobs:
      - Build
      - Test:
          requires:
            - Build
      - Tag Release:
          requires:
            - Test
#      - Deploy Artifacts:
#          requires:
#            - Tag Release